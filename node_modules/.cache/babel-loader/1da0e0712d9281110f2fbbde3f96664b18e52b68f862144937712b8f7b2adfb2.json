{"ast":null,"code":"import React,{useState,useEffect}from\"react\";import{useParams,useNavigate}from\"react-router-dom\";import{useQuery,useMutation}from\"@apollo/client\";import{Container,Row,Col,Form,Button,Card,Alert}from\"react-bootstrap\";import{GET_ME,GET_ITEM_BY_ID}from\"../utils/queries\";import{UPDATE_ITEM_STATUS,CREATE_SWAP_TRANSACTION}from\"../utils/mutations\";import Auth from\"../utils/auth\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";const SwapItems=()=>{const{id}=useParams();const navigate=useNavigate();const{loading:loadingMe,data:dataMe}=useQuery(GET_ME);const{loading:loadingItem,data:dataItem}=useQuery(GET_ITEM_BY_ID,{variables:{itemId:id},skip:!id});const[selectedItems,setSelectedItems]=useState([]);const[updateItemStatus]=useMutation(UPDATE_ITEM_STATUS);// const [createSwapTransaction] = useMutation(CREATE_SWAP_TRANSACTION);\nconst[message,setMessage]=useState(null);const currentUser=Auth.getProfile().data.username;const[items,setItems]=useState([]);useEffect(()=>{if(dataMe&&dataItem){const specificItem=dataItem.getItemById;const userItems=dataMe.me.createdItems||[];const combinedItems=specificItem?[specificItem,...userItems.filter(item=>item.id!==specificItem.id)]:userItems;setItems(combinedItems);}},[dataMe,dataItem]);const handleCheckboxChange=itemId=>{setSelectedItems(prev=>prev.includes(itemId)?prev.filter(id=>id!==itemId):[...prev,itemId]);};const handleSwapItems=async()=>{if(selectedItems.length===0){setMessage(\"No items selected for swap\");return;}try{// const swapTransactionPromises = selectedItems.map((selectedItemId) =>\n//   createSwapTransaction({\n//     variables: {\n//       itemOffered: selectedItemId,\n//       itemRequested: id,\n//       // Include user IDs\n//       offeredByUser: dataMe.me._id,\n//       requestedByUser: dataItem.getItemById.owner,\n//     },\n//   })\n// );\nconst updateOfferedItemsPromises=selectedItems.map(itemId=>updateItemStatus({variables:{itemId,status:\"OfferToSwap\",offerToUser:dataItem.getItemById.owner,itemToChange:id}}));const updateRequestedItemPromise=updateItemStatus({variables:{itemId:id,status:\"requestToSwap\",requestByUser:currentUser}});await Promise.all([// ...swapTransactionPromises,\n...updateOfferedItemsPromises,updateRequestedItemPromise]);setMessage(\"Swap request sent\");}catch(error){console.error(\"Error in handling swap items:\",error);setMessage(\"Failed to send swap request: \".concat(error.message));}};if(loadingMe||loadingItem)return/*#__PURE__*/_jsx(\"h1\",{children:\"Loading...\"});return/*#__PURE__*/_jsxs(Container,{children:[message&&/*#__PURE__*/_jsx(Alert,{variant:message.includes(\"failed\")?\"danger\":\"success\",children:message}),/*#__PURE__*/_jsxs(Row,{children:[/*#__PURE__*/_jsx(Col,{md:4,children:items[0]&&/*#__PURE__*/_jsxs(Card,{className:\"mb-3\",children:[/*#__PURE__*/_jsx(Card.Img,{variant:\"top\",src:items[0].image,alt:items[0].itemName}),/*#__PURE__*/_jsx(Card.Body,{children:/*#__PURE__*/_jsx(Card.Title,{children:items[0].itemName})})]})}),/*#__PURE__*/_jsx(Col,{md:8,children:/*#__PURE__*/_jsx(Row,{children:items.slice(1).map(item=>/*#__PURE__*/_jsx(Col,{xs:12,md:6,lg:4,className:\"mb-3\",children:/*#__PURE__*/_jsxs(Card,{className:\"user-item\",children:[/*#__PURE__*/_jsx(Card.Img,{variant:\"top\",src:item.image,alt:item.itemName}),/*#__PURE__*/_jsxs(Card.Body,{children:[/*#__PURE__*/_jsx(Card.Title,{children:item.itemName}),/*#__PURE__*/_jsx(Form.Check,{type:\"checkbox\",label:\"Select for swap\",onChange:()=>handleCheckboxChange(item.id),checked:selectedItems.includes(item.id)})]})]})},item.id))})})]}),/*#__PURE__*/_jsx(Button,{onClick:handleSwapItems,disabled:selectedItems.length===0,children:\"Swap Items\"})]});};export default SwapItems;","map":{"version":3,"names":["React","useState","useEffect","useParams","useNavigate","useQuery","useMutation","Container","Row","Col","Form","Button","Card","Alert","GET_ME","GET_ITEM_BY_ID","UPDATE_ITEM_STATUS","CREATE_SWAP_TRANSACTION","Auth","jsx","_jsx","jsxs","_jsxs","SwapItems","id","navigate","loading","loadingMe","data","dataMe","loadingItem","dataItem","variables","itemId","skip","selectedItems","setSelectedItems","updateItemStatus","message","setMessage","currentUser","getProfile","username","items","setItems","specificItem","getItemById","userItems","me","createdItems","combinedItems","filter","item","handleCheckboxChange","prev","includes","handleSwapItems","length","updateOfferedItemsPromises","map","status","offerToUser","owner","itemToChange","updateRequestedItemPromise","requestByUser","Promise","all","error","console","concat","children","variant","md","className","Img","src","image","alt","itemName","Body","Title","slice","xs","lg","Check","type","label","onChange","checked","onClick","disabled"],"sources":["/Users/phoenix/code/vercel/swapcommf/src/pages/SwapItems.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useParams, useNavigate } from \"react-router-dom\";\nimport { useQuery, useMutation } from \"@apollo/client\";\nimport {\n  Container,\n  Row,\n  Col,\n  Form,\n  Button,\n  Card,\n  Alert,\n} from \"react-bootstrap\";\nimport { GET_ME, GET_ITEM_BY_ID } from \"../utils/queries\";\nimport {\n  UPDATE_ITEM_STATUS,\n  CREATE_SWAP_TRANSACTION,\n} from \"../utils/mutations\";\nimport Auth from \"../utils/auth\";\n\nconst SwapItems = () => {\n  const { id } = useParams();\n  const navigate = useNavigate();\n  const { loading: loadingMe, data: dataMe } = useQuery(GET_ME);\n  const { loading: loadingItem, data: dataItem } = useQuery(GET_ITEM_BY_ID, {\n    variables: { itemId: id },\n    skip: !id,\n  });\n\n  const [selectedItems, setSelectedItems] = useState([]);\n  const [updateItemStatus] = useMutation(UPDATE_ITEM_STATUS);\n  // const [createSwapTransaction] = useMutation(CREATE_SWAP_TRANSACTION);\n  const [message, setMessage] = useState(null);\n  const currentUser = Auth.getProfile().data.username;\n  const [items, setItems] = useState([]);\n\n  useEffect(() => {\n    if (dataMe && dataItem) {\n      const specificItem = dataItem.getItemById;\n      const userItems = dataMe.me.createdItems || [];\n      const combinedItems = specificItem\n        ? [\n            specificItem,\n            ...userItems.filter((item) => item.id !== specificItem.id),\n          ]\n        : userItems;\n      setItems(combinedItems);\n    }\n  }, [dataMe, dataItem]);\n\n  const handleCheckboxChange = (itemId) => {\n    setSelectedItems((prev) =>\n      prev.includes(itemId)\n        ? prev.filter((id) => id !== itemId)\n        : [...prev, itemId]\n    );\n  };\n\n  const handleSwapItems = async () => {\n    if (selectedItems.length === 0) {\n      setMessage(\"No items selected for swap\");\n      return;\n    }\n\n    try {\n      // const swapTransactionPromises = selectedItems.map((selectedItemId) =>\n      //   createSwapTransaction({\n      //     variables: {\n      //       itemOffered: selectedItemId,\n      //       itemRequested: id,\n      //       // Include user IDs\n      //       offeredByUser: dataMe.me._id,\n      //       requestedByUser: dataItem.getItemById.owner,\n      //     },\n      //   })\n      // );\n\n      const updateOfferedItemsPromises = selectedItems.map((itemId) =>\n        updateItemStatus({\n          variables: {\n            itemId,\n            status: \"OfferToSwap\",\n            offerToUser: dataItem.getItemById.owner,\n            itemToChange: id,\n          },\n        })\n      );\n\n      const updateRequestedItemPromise = updateItemStatus({\n        variables: {\n          itemId: id,\n          status: \"requestToSwap\",\n          requestByUser: currentUser,\n        },\n      });\n\n      await Promise.all([\n        // ...swapTransactionPromises,\n        ...updateOfferedItemsPromises,\n        updateRequestedItemPromise,\n      ]);\n\n      setMessage(\"Swap request sent\");\n    } catch (error) {\n      console.error(\"Error in handling swap items:\", error);\n      setMessage(`Failed to send swap request: ${error.message}`);\n    }\n  };\n\n  if (loadingMe || loadingItem) return <h1>Loading...</h1>;\n\n  return (\n    <Container>\n      {message && (\n        <Alert variant={message.includes(\"failed\") ? \"danger\" : \"success\"}>\n          {message}\n        </Alert>\n      )}\n      <Row>\n        <Col md={4}>\n          {items[0] && (\n            <Card className=\"mb-3\">\n              <Card.Img\n                variant=\"top\"\n                src={items[0].image}\n                alt={items[0].itemName}\n              />\n              <Card.Body>\n                <Card.Title>{items[0].itemName}</Card.Title>\n              </Card.Body>\n            </Card>\n          )}\n        </Col>\n        <Col md={8}>\n          <Row>\n            {items.slice(1).map((item) => (\n              <Col key={item.id} xs={12} md={6} lg={4} className=\"mb-3\">\n                <Card className=\"user-item\">\n                  <Card.Img\n                    variant=\"top\"\n                    src={item.image}\n                    alt={item.itemName}\n                  />\n                  <Card.Body>\n                    <Card.Title>{item.itemName}</Card.Title>\n                    <Form.Check\n                      type=\"checkbox\"\n                      label=\"Select for swap\"\n                      onChange={() => handleCheckboxChange(item.id)}\n                      checked={selectedItems.includes(item.id)}\n                    />\n                  </Card.Body>\n                </Card>\n              </Col>\n            ))}\n          </Row>\n        </Col>\n      </Row>\n      <Button onClick={handleSwapItems} disabled={selectedItems.length === 0}>\n        Swap Items\n      </Button>\n    </Container>\n  );\n};\n\nexport default SwapItems;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}